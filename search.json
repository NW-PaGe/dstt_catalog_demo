[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\n\nNORTHWEST PATHOGEN GENOMICS CENTER OF EXCELLENCE\n\nData Catalog\n",
    "section": "",
    "text": "This is a static website and demo of a data catalog. Search for data objects in the dashboard below.\ndashboard\n\n\n\n\n\n\n\n\n\n\n// Create a checkbox input for selecting products\nviewof select_products = Inputs.checkbox(products, {label: \"Select products:\", value: products})\n\n\n\n\n\n\n\nmetadata_js = JSON.parse(metadata_json)\n\n// Function to update parent and child values with intermediate values\nfunction updateMetadataWithIntermediates(metadata_js, select_products) {\n  // Convert select_products to a Set for faster lookup\n  const selectedSet = new Set(select_products);\n  \n  // Create a map to look up intermediate values\n  const productMap = new Map(metadata_js.map(row =&gt; [row.Product_Name, row]));\n\n  return metadata_js.map(row =&gt; {\n    const updatedRow = {...row}; // Copy the row to avoid mutating the original\n    if (!selectedSet.has(row.Product_Name)) {\n      // If the product itself is not selected, exclude it from the results\n      return null;\n    }\n    // Update parent if it's not selected\n    if (row.parent && !selectedSet.has(row.parent)) {\n      // Look for the intermediate product to use its parent\n      const intermediateProduct = metadata_js.find(r =&gt; r.child === row.Product_Name && selectedSet.has(r.parent));\n      updatedRow.parent = intermediateProduct ? intermediateProduct.parent : null;\n      // Update direct_parent to show indirect linkage\n      updatedRow.direct_parent = false;\n    }\n    // Update child if it's not selected\n    if (row.child && !selectedSet.has(row.child)) {\n      // Look for the intermediate product to use its child\n      const intermediateProduct = metadata_js.find(r =&gt; r.parent === row.Product_Name && selectedSet.has(r.child));\n      updatedRow.child = intermediateProduct ? intermediateProduct.child : null;\n      // Update direct_child to show indirect linkage\n      updatedRow.direct_child = false;\n    }\n    return updatedRow;\n  }).filter(row =&gt; row !== null); // Remove rows that were excluded\n}\n\n// Apply the update function\nfiltered_metadata_js = updateMetadataWithIntermediates(metadata_js, select_products);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngenerateMermaidChart = (select_products, metadata_js) =&gt; {\n  // Ensure select_products is an array\n  select_products = Array.isArray(select_products) ? select_products : [];\n  \n  if (select_products.length === 0) return \"graph TD\\n\";\n\n  // Collect unique nodes (products) and edges (relationships)\n  let nodes = new Set();\n  let edges = new Set();\n\n  // Add nodes and edges for selected products\n  select_products.forEach(product =&gt; {\n    // Add the product itself\n    nodes.add(product);\n\n    // Find related rows\n    let related_rows = metadata_js.filter(row =&gt; row.Product_Name === product || row.parent === product || row.child === product);\n\n    related_rows.forEach(row =&gt; {\n      if (select_products.includes(row.Product_Name)) {\n        nodes.add(row.Product_Name);\n        if (row.parent && select_products.includes(row.parent)) {\n          nodes.add(row.parent);\n          if (row.direct_parent === true) {\n            edges.add(`${row.parent} --&gt; ${row.Product_Name}`);\n            }\n          if (row.direct_parent === false) {\n            edges.add(`${row.parent} -.-&gt; ${row.Product_Name}`);\n            }\n        }\n        if (row.child && select_products.includes(row.child)) {\n          nodes.add(row.child);\n          if (row.direct_child === true) {\n            edges.add(`${row.Product_Name} --&gt; ${row.child}`);\n            }\n          if (row.direct_child === false) {\n            edges.add(`${row.Product_Name} -.-&gt; ${row.child}`);\n            }\n        }\n      }\n    });\n  });\n\n  // Create the mermaid syntax\n  let mermaidSyntax = \"graph TD\\n\";\n  \n  // Add nodes to the mermaid syntax\n  nodes.forEach(node =&gt; {\n    mermaidSyntax += `${node}\\n`;\n  });\n\n  // Add edges to the mermaid syntax\n  edges.forEach(edge =&gt; {\n    mermaidSyntax += `${edge}\\n`;\n  });\n  \n  return mermaidSyntax;\n}\n\n// Generate the mermaid chart based on the selected products\nmermaidChart = generateMermaidChart(select_products, filtered_metadata_js);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Display the mermaid chart\nmermaid`${mermaidChart}`\n\n\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 600\n\n## file: app.R\n# import docx_to_html function\ndocx_to_html &lt;- function(doc) {\n  #' Convert docx to html \n  #' \n  #' Return a semi formatted html version of a docx file. This function\n  #' accepts docx objects (output by officer::read_docx) and outputs an html-marked character element\n  #' with some headers and tables formatted. Media will not be included in output.\n  #' \n  #' @param doc docx object output from officer::read_docx\n  #' @seealso [officer::read_docx()]\n  #' \n  \n  \n  library(officer)\n  library(dplyr)\n  library(htmltools)\n  \n  doc_content &lt;- officer::docx_summary(doc) # convert doc to data frame with rows of docx elements\n  \n  doc_content &lt;- dplyr::arrange(doc_content, doc_index, row_id, cell_id) # arrange df by index, then row id, then cell id\n  \n  html_content &lt;- \"\" # Initialize html content element\n  \n  is_table &lt;- FALSE # Set flag to check if a table is being constructed\n  \n  # Step through the document content rowwise to render paragraphs, headers, tables, and page breaks\n  for (i in 1:nrow(doc_content)) {\n    # close the row and table if the previous row was part of a table\n    if (is_table & !doc_content$content_type[i] %in% \"table cell\") {\n      html_content &lt;- paste0(html_content, \"&lt;/tr&gt;&lt;/table&gt;\")  # Close row and table\n      is_table &lt;- FALSE # reset to false\n    }\n    # if row is paragraph type ...\n    if (doc_content$content_type[i] %in% \"paragraph\") {\n      # insert a horizontal line if a page break is present\n      if (tolower(doc_content$text[i]) %in% 'page break') {\n        html_content &lt;- paste0(html_content, htmltools::hr())\n      # otherwise, if a heading style, insert text with a heading tag (add +1 to heading # as we assign title as h1 later)  \n      } else if (grepl(\"heading [1-5]\", doc_content$style_name[i])) {\n        header = gsub(\"heading ([1-5])\", \"\\\\1\", doc_content$style_name[i])\n        html_content &lt;- paste0(\n          html_content,\n          switch(as.numeric(header)+1,\n                 htmltools::h1(doc_content$text[i]),\n                 htmltools::h2(doc_content$text[i]),\n                 htmltools::h3(doc_content$text[i]),\n                 htmltools::h4(doc_content$text[i]),\n                 htmltools::h5(doc_content$text[i]),\n                 htmltools::h6(doc_content$text[i])\n          )\n        )\n      # otherwise, if a title style, insert text with h1 tags\n      } else if (tolower(doc_content$style_name[i]) %in% \"title\") {\n        html_content &lt;- paste0(html_content, htmltools::h1(doc_content$text[i]))\n      # otherwise, insert text with paragraph tags\n      } else {\n        html_content &lt;- paste0(html_content, htmltools::p(doc_content$text[i]))\n      }\n    # otherwise (if not a paragraph type), if it is a table cell in row 1 cell 1 (meaning, the first cell of a table), insert the table border\n    } else if (doc_content$content_type[i] %in% \"table cell\" & doc_content$row_id[i]%in%1 & doc_content$cell_id[i]%in%1) {\n      html_content &lt;- paste0(html_content, \"&lt;table border='1'&gt;\")  # Start a table\n      is_table &lt;- TRUE # set table flag to true\n    # otherwise, if table cell and the first cell of a new row, add a new row tag\n    } else if (doc_content$content_type[i] %in% \"table cell\" & doc_content$row_id[i] &gt; doc_content$row_id[i-1]) {\n      html_content &lt;- paste0(html_content, \"&lt;/tr&gt;&lt;tr&gt;\")  # Close prev row and start a new row\n    # insert text if not paragraph of table cell w/o formatting\n    } else if (!doc_content$content_type[i] %in% c(\"paragraph\", \"table cell\")) {\n      html_content &lt;- paste0(html_content, doc_content$text[i])\n    }\n    # if a table cell, insert text with td tag\n    if (doc_content$content_type[i] %in% \"table cell\") {\n      html_content &lt;- paste0(html_content, \"&lt;td&gt;\", doc_content$text[i], \"&lt;/td&gt;\")  # Add cell content\n    }\n  }        \n  \n  # convert character element to element marked as HTML\n  HTML(html_content)\n}\n\n# import split_values.R\nlibrary(stringr)\n\nsplit_values &lt;- function(x, sep=';', unlist=FALSE) {\n  #' split_values\n  #' \n  #' Function splits char elements inside char vectors and removes surrounding whitespace\n  #' \n  #' @param x character or vector of characters\n  #' @param sep string to split on; default \";\"\n  #' @param unlist whether or not to unlist the character list; default FALSE\n  #' @return a list (or vector, if unlist=TRUE) of character elements\n  #' \n  #' @example split_values(x=c('this', 'string; is', 'split')) \n  #' @example split_values(x=c('This will be return as a vector'), sep=',', unlist=TRUE)\n  #' \n  x = stringr::str_split(x, sep) # split by sep and return string\n  x = sapply(x, trimws) # trim whitespace of strings in list\n  if (unlist) {\n    x = unlist(x)\n  }\n  return(x)\n}\n\n # import server & ui code\nlibrary(shiny)\nlibrary(DT)\nlibrary(officer)\nlibrary(duckdb)\nlibrary(jsonlite)\n\n# Read the CSV file when the script starts\nmetadata &lt;- read.csv(url(\"https://raw.githubusercontent.com/NW-PaGe/dstt_catalog_demo/refs/heads/main/metadata.csv\"))\n\n# Define the UI\nui &lt;- fluidPage(\n  # Add custom CSS\n  tags$head(\n    tags$style(HTML(\"\n      .filter-tag {\n        display: inline-block;\n        margin: 3px;\n        padding: 6px 12px;\n        background-color: #3498db;\n        color: white;\n        border-radius: 15px;\n        cursor: pointer;\n        font-size: 14px;\n        transition: background-color 0.3s ease;\n      }\n      .filter-tag:hover {\n        background-color: #2980b9;\n      }\n      .filter-label {\n        font-weight: bold;\n        margin-right: 5px;\n      }\n      .filter-value {\n        font-weight: normal;\n      }\n      .remove-icon {\n        margin-left: 8px;\n        font-weight: bold;\n        opacity: 0.8;\n      }\n      .filter-tag:hover .remove-icon {\n        opacity: 1;\n      }\n      #fileListContent {\n        max-height: none;\n        overflow-y: hidden;\n      }\n      #fileListContent li:nth-child(n+7) {\n        display: none;\n      }\n      #fileListContent li:nth-child(6) {\n        white-space: nowrap;\n        overflow: visible;\n        text-overflow: ellipsis;\n        opacity: 0.7;\n        position: relative;\n        padding-right: 20px;\n        list-style-type: disc !important;\n      }\n      #fileListContent li:nth-child(6) a {\n        overflow: hidden;\n        text-overflow: ellipsis;\n        white-space: nowrap;\n        display: block;\n      }\n      #fileListContent li:nth-child(6)::after {\n        content: '';\n        position: absolute;\n        bottom: 0;\n        left: -20px;\n        right: 0;\n        height: 60%;\n        background: linear-gradient(to bottom, transparent, white);\n        pointer-events: none;\n      }\n      #fileListContent.expanded li {\n        display: list-item !important;\n        white-space: normal !important;\n        opacity: 1 !important;\n      }\n      #fileListContent.expanded li:nth-child(6)::after {\n        display: none;\n      }\n      #toggleBtn {\n        color: #3498db;\n        cursor: pointer;\n        border: none;\n        background: none;\n        padding: 5px 10px;\n        width: 100%;\n        text-align: center;\n        margin-top: 10px;\n        font-size: 16px;\n      }\n      .file-list-ul {\n        list-style-type: disc !important;\n        padding-left: 20px;\n        margin: 0;\n      }\n      .file-list-ul li {\n        list-style-type: disc !important;\n      }\n    \")),\n    tags$script(HTML(\"\n      function toggleFileList() {\n        var content = document.getElementById('fileListContent');\n        var btn = document.getElementById('toggleBtn');\n        if (content.classList.contains('expanded')) {\n          content.classList.remove('expanded');\n          btn.innerHTML = '▾';\n        } else {\n          content.classList.add('expanded');\n          btn.innerHTML = '▴';\n        }\n      }\n    \"))\n  ),\n  titlePanel(\"Filtered Metadata Viewer\"),\n  sidebarLayout(\n    sidebarPanel(\n      # Static text inputs for certain columns\n      textInput(\"product_id\", \"Product ID\", \"\"),\n      textInput(\"product_name\", \"Product Name\", \"\"),\n      textInput(\"keywords\", \"Keywords\", \"\", placeholder = \"variant, genbank, lineage\"),\n\n\n      \n      # Static text inputs dynamically pulled from metadata.csv for certain columns\n      selectInput(\"location\", \"Location\", choices = c(\"All\", unique(split_values(metadata$Location, unlist=T))), selected = \"All\"),\n      selectInput(\"steward\", \"Steward\", choices = c(\"All\", unique(split_values(metadata$Steward, unlist=T))), selected = \"All\"),\n      selectInput(\"users\", \"Users\", choices = c(\"All\", unique(split_values(metadata$Users, unlist=T))), selected = \"All\"),\n      selectInput(\"pii\", \"PII\", choices = c(\"All\", unique(split_values(metadata$PII, unlist=T))), selected = \"All\"),\n      selectInput(\"source\", \"Source\", choices = c(\"All\", unique(split_values(metadata$Source, unlist=T))), selected = \"All\"),\n      selectInput(\"ftype\", \"File Type\", choices = c(\"All\", unique(tolower(gsub(\"^.+\\\\.(.+)$\", \"\\\\1\", metadata$Connection)))), selected = \"All\")\n    ),\n    mainPanel(\n      h3(\"Filters Applied:\"),\n      uiOutput(\"filtersSummary\"),\n      br(),\n      h3(\"Filtered File Paths:\"),\n      uiOutput(\"fileList\"),\n      br(),\n      h3(\"Selected File Data:\"),\n      DTOutput(\"fileDataTable\"),\n      uiOutput(\"docx_content\"),\n      br()\n    )\n  )\n)\n\n# Define the server logic\nserver &lt;- function(input, output, session) {\n  observe({\n    output$fileList &lt;- renderUI({\n      file_paths &lt;- filteredData()$Connection\n      \n      tagList(\n        tags$div(\n          id = \"fileListContent\",\n          tags$ul(\n            class = \"file-list-ul\",\n            lapply(seq_along(file_paths), function(i) {\n              tags$li(\n                actionLink(\n                  inputId = paste0(\"file_\", i),\n                  label = file_paths[i],\n                  onclick = sprintf(\"Shiny.setInputValue('last_clicked', '%s', {priority: 'event'});\", \n                                    paste0(\"file_\", i))\n                )\n              )\n            })\n          )\n        ),\n        tags$button(\n          id = \"toggleBtn\",\n          onclick = \"toggleFileList()\",\n          \"▾\"\n        )\n      )\n    })\n  }, priority = 1000)\n  \n  # Original filtering logic remains the same\n  filteredData &lt;- reactive({\n    data &lt;- metadata\n    \n    # Apply filters based on input values\n    if (!is.null(input$product_id) && input$product_id != \"\") {\n      data &lt;- subset(data, grepl(input$product_id, Product_ID, ignore.case = TRUE))\n    }\n    if (!is.null(input$product_name) && input$product_name != \"\") {\n      data &lt;- subset(data, grepl(input$product_name, Product_Name, ignore.case = TRUE))\n    }\n    if (input$keywords != \"\") {\n      data &lt;- subset(data, grepl(input$keywords, Keywords, ignore.case = TRUE))\n    }\n    if (!is.null(input$location) && input$location != \"All\") {\n      data &lt;- subset(data, sapply(split_values(Location), function(.) input$location %in% .))\n    }\n    if (!is.null(input$steward) && input$steward != \"All\") {\n      data &lt;- subset(data, sapply(split_values(Steward), function(.) input$steward %in% .))\n    }\n    if (!is.null(input$users) && input$users != \"All\") {\n      data &lt;- subset(data, sapply(split_values(Users), function(.) input$users %in% .))\n    }\n    if (!is.null(input$pii) && input$pii != \"All\") {\n      data &lt;- subset(data, sapply(split_values(PII), function(.) input$pii %in% .))\n    }\n    if (!is.null(input$source) && input$source != \"All\") {\n      data &lt;- subset(data, sapply(split_values(Source), function(.) input$source %in% .))\n    }\n    if (!is.null(input$ftype) && input$ftype != \"All\") {\n      data &lt;- subset(data, grepl(paste0(\"\\\\.\", input$ftype), Connection, ignore.case=TRUE))\n    }\n    \n    return(data)\n  })\n  # Modified filters summary with enhanced styling\n  output$filtersSummary &lt;- renderUI({\n    filters &lt;- list()\n    \n    if (!is.null(input$product_id) && input$product_id != \"\") {\n      filters$product_id &lt;- list(label = \"Product ID\", value = input$product_id)\n    }\n    if (!is.null(input$product_name) && input$product_name != \"\") {\n      filters$product_name &lt;- list(label = \"Product Name\", value = input$product_name)\n    }\n    if (!is.null(input$keywords) && input$keywords != \"\") {\n      filters$keywords &lt;- list(label = \"Keywords\", value = input$keywords)\n    }\n    if (!is.null(input$location) && input$location != \"All\") {\n      filters$location &lt;- list(label = \"Location\", value = input$location)\n    }\n    if (!is.null(input$steward) && input$steward != \"All\") {\n      filters$steward &lt;- list(label = \"Steward\", value = input$steward)\n    }\n    if (!is.null(input$users) && input$users != \"All\") {\n      filters$users &lt;- list(label = \"Users\", value = input$users)\n    }\n    if (!is.null(input$pii) && input$pii != \"All\") {\n      filters$pii &lt;- list(label = \"PII\", value = input$pii)\n    }\n    if (!is.null(input$source) && input$source != \"All\") {\n      filters$source &lt;- list(label = \"Source\", value = input$source)\n    }\n    if (!is.null(input$ftype) && input$ftype != \"All\") {\n      filters$ftype &lt;- list(label = \"File Type\", value = input$ftype)\n    }\n    \n    if (length(filters) == 0) {\n      return(p(\"No filters applied.\"))\n    } else {\n      # Create interactive filter tags with enhanced styling\n      tags$div(\n        lapply(names(filters), function(filter_name) {\n          tags$div(\n            class = \"filter-tag\",\n            onclick = sprintf(\"Shiny.setInputValue('remove_filter', '%s', {priority: 'event'});\", filter_name),\n            tags$span(\n              class = \"filter-label\",\n              filters[[filter_name]]$label\n            ),\n            tags$span(\n              class = \"filter-value\",\n              filters[[filter_name]]$value\n            ),\n            tags$span(\n              class = \"remove-icon\",\n              HTML(\"&times;\")\n            )\n          )\n        })\n      )\n    }\n  })\n  \n  # Observer to handle filter removal\n  observeEvent(input$remove_filter, {\n    filter_name &lt;- input$remove_filter\n    if (filter_name %in% c(\"product_id\", \"product_name\", \"keywords\")) {\n      updateTextInput(session, filter_name, value = \"\")\n    } else {\n      updateSelectInput(session, filter_name, selected = \"All\")\n    }\n  })\n  \n  # Reactive value to store the selected file path\n  selectedFile &lt;- reactiveVal(NULL)\n  \n  # Replace the original observer with this new one that responds to last_clicked\n  observeEvent(input$last_clicked, {\n    file_index &lt;- as.numeric(gsub(\"file_\", \"\", input$last_clicked))\n    file_paths &lt;- filteredData()$Connection\n    if (file_index &lt;= length(file_paths)) {\n      selectedFile(file_paths[file_index])\n    }\n  }, ignoreInit = TRUE)\n  \n  # Render the data from the selected file\n  output$fileDataTable &lt;- renderDT({\n    req(selectedFile())  # Ensure there is a selected file\n    if (grepl('\\\\.csv$', selectedFile())) {\n      tryCatch({\n        file_url &lt;- paste0('https://raw.githubusercontent.com/NW-PaGe/dstt_catalog_demo/refs/heads/main/', selectedFile())\n        file_data &lt;- read.csv(url(file_url))\n        # Convert dataframe to datatable object\n        datatable(file_data, options = list(pageLength = 10, autoWidth = TRUE))\n      }, error = function(e) {\n        datatable(data.frame(Error = paste(\"Unable to read file:\", e$message)),\n                  options = list(pageLength = 1, dom = 't'))\n      })\n    } else if (grepl('\\\\.parquet$', selectedFile())) {\n      tryCatch({\n        # get file location url\n        file_url &lt;- paste0('https://raw.githubusercontent.com/NW-PaGe/dstt_catalog_demo/refs/heads/main/', selectedFile())\n        # check file size before downloading:\n        api_url &lt;- paste0(\"https://api.github.com/repos/NW-PaGe/dstt_catalog_demo/contents/\", selectedFile()) # Construct the GitHub API URL for the file\n        con &lt;- url(api_url, \"rb\") # open connection\n        response &lt;- readLines(con) # get response\n        close(con) # close connection\n        json_data &lt;- jsonlite::fromJSON(paste(response, collapse = '')) # parse json response\n        file_size &lt;- as.numeric(json_data$size)/1024  # get size in KB\n        # download parquet if small enough file\n        if (file_size &lt; 100000) { # check if file is under 100 KB before attempting download\n          # Need to download temp file since httpfs extension not usable with Shinylive:\n          temp_file &lt;- tempfile(fileext = \".parquet\") # create temp parquet file\n          download.file(file_url, temp_file, mode = \"wb\")  # write data from file at url to temp file\n          # read parquet\n          con &lt;- dbConnect(duckdb(), ':memory:') # create db in mem\n          file_data &lt;- dbGetQuery(con, glue::glue(\"SELECT * FROM read_parquet('{temp_file}') LIMIT 10000\")) # Read data and limit preview size to 10k rows\n          dbDisconnect(con, shutdown = TRUE) # close in mem db connection\n          # convert dataframe to datatable object\n          datatable(file_data, options = list(pageLength = 10, autoWidth = TRUE))\n        } else {\n          datatable(data.frame(Warning = paste(\"Unable to read file: File too large. File size (KB):\", format(file_size, nsmall=2, big.mark=','))),\n                    options = list(pageLength = 1, dom = 't'))\n        }\n      }, error = function(e) {\n        datatable(data.frame(Error = paste(\"Unable to read file:\", e$message)),\n                  options = list(pageLength = 1, dom = 't'))\n      })\n    } else {\n      datatable(data.frame())\n    }\n  })\n  \n  # Render docx content\n  output$docx_content &lt;- renderUI({\n    req(selectedFile())  # Ensure there is a selected file\n    if (grepl('\\\\.docx$', selectedFile())) {\n      tryCatch({\n        file_url &lt;- paste0('https://raw.githubusercontent.com/NW-PaGe/dstt_catalog_demo/main/', selectedFile())\n        temp_file &lt;- tempfile(fileext = \".docx\")\n        download.file(file_url, destfile = temp_file, mode = \"wb\")\n        # Read the .docx file using officer\n        doc &lt;- read_docx(temp_file)\n        # Convert docx to html element using code from src\n        docx_to_html(doc)\n      }, error = function(e) {\n        HTML(paste(\"Unable to read file:\", e$message))\n      })\n    } else {\n      HTML('')\n    }\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n\n\n## file: metadata.csv\nProduct_ID,Product_Name,Location,Steward,Source,Users,Keywords,PII,Connection,Parent,Child\n4047648790,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/wa_genbank/wa_genbank_2024-10-21.csv,genbank,seq_report\n5754199350,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/wa_genbank/wa_genbank_2024-10-14.csv,genbank,seq_report\n9000442265,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/wa_genbank/wa_genbank_2024-10-07.csv,genbank,seq_report\n9325481063,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/wa_genbank/wa_genbank_2024-09-30.csv,genbank,seq_report\n6072493491,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-03.csv,,seq_report\n5645041168,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-04.csv,,seq_report\n3344276255,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-05.csv,,seq_report\n2307679692,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-06.csv,,seq_report\n1512337206,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-07.csv,,seq_report\n2824302477,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-10.csv,,seq_report\n3748996607,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-11.csv,,seq_report\n2008766938,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-12.csv,,seq_report\n7300648833,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-13.csv,,seq_report\n3855770051,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-14.csv,,seq_report\n3092745195,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-17.csv,,seq_report\n4520627002,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-18.csv,,seq_report\n3932969825,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-19.csv,,seq_report\n6873647526,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-20.csv,,seq_report\n8109343197,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-21.csv,,seq_report\n9323872357,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-24.csv,,seq_report\n7334703566,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-25.csv,,seq_report\n8858668888,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-26.csv,,seq_report\n7829333381,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run163.csv,,seq_report\n9936639753,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run170.csv,,seq_report\n2463472188,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run172.csv,,seq_report\n8971627055,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run172b.csv,,seq_report\n7253259313,seq_report,network_drive,MEP,,Public,report:variants;lineages,No,data/seq_report/SequencingReport_2024-01-30.docx,wa_genbank;lineages;seq_results,\n9715465027,genbank,network_drive,DIQA,NCBI,DIQA,ncbi;genbank;lineages;repository;refseq,No,data/genbank/raw_genbank_2024-09-30.parquet,,wa_genbank\n8085881829,genbank,network_drive,DIQA,NCBI,DIQA,ncbi;genbank;lineages;repository;refseq,No,data/genbank/raw_genbank_2024-10-07.parquet,,wa_genbank\n7394149033,genbank,network_drive,DIQA,NCBI,DIQA,ncbi;genbank;lineages;repository;refseq,No,data/genbank/raw_genbank_2024-10-14.parquet,,wa_genbank\n3590275606,genbank,network_drive,DIQA,NCBI,DIQA,ncbi;genbank;lineages;repository;refseq,No,data/genbank/raw_genbank_2024-10-21.parquet,,wa_genbank"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]