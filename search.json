[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\n\nNORTHWEST PATHOGEN GENOMICS CENTER OF EXCELLENCE\n\nData Catalog\n",
    "section": "",
    "text": "NORTHWEST PATHOGEN GENOMICS CENTER OF EXCELLENCE\n\nData Catalog\n\nThis is a static website and demo of a data catalog. Search for data objects in the dashboard below.\ndashboard\n\n\n\n\n\n\n\n\n\n\n// Create a checkbox input for selecting products\nviewof select_products = Inputs.checkbox(products, {label: \"Select products:\", value: products})\n\n\n\n\n\n\n\nmetadata_js = JSON.parse(metadata_json)\n\n// Function to update parent and child values with intermediate values\nfunction updateMetadataWithIntermediates(metadata_js, select_products) {\n  // Convert select_products to a Set for faster lookup\n  const selectedSet = new Set(select_products);\n  \n  // Create a map to look up intermediate values\n  const productMap = new Map(metadata_js.map(row =&gt; [row.Product_Name, row]));\n\n  return metadata_js.map(row =&gt; {\n    const updatedRow = {...row}; // Copy the row to avoid mutating the original\n    if (!selectedSet.has(row.Product_Name)) {\n      // If the product itself is not selected, exclude it from the results\n      return null;\n    }\n    // Update parent if it's not selected\n    if (row.parent && !selectedSet.has(row.parent)) {\n      // Look for the intermediate product to use its parent\n      const intermediateProduct = metadata_js.find(r =&gt; r.child === row.Product_Name && selectedSet.has(r.parent));\n      updatedRow.parent = intermediateProduct ? intermediateProduct.parent : null;\n      // Update direct_parent to show indirect linkage\n      updatedRow.direct_parent = false;\n    }\n    // Update child if it's not selected\n    if (row.child && !selectedSet.has(row.child)) {\n      // Look for the intermediate product to use its child\n      const intermediateProduct = metadata_js.find(r =&gt; r.parent === row.Product_Name && selectedSet.has(r.child));\n      updatedRow.child = intermediateProduct ? intermediateProduct.child : null;\n      // Update direct_child to show indirect linkage\n      updatedRow.direct_child = false;\n    }\n    return updatedRow;\n  }).filter(row =&gt; row !== null); // Remove rows that were excluded\n}\n\n// Apply the update function\nfiltered_metadata_js = updateMetadataWithIntermediates(metadata_js, select_products);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngenerateMermaidChart = (select_products, metadata_js) =&gt; {\n  // Ensure select_products is an array\n  select_products = Array.isArray(select_products) ? select_products : [];\n  \n  if (select_products.length === 0) return \"graph TD\\n\";\n\n  // Collect unique nodes (products) and edges (relationships)\n  let nodes = new Set();\n  let edges = new Set();\n\n  // Add nodes and edges for selected products\n  select_products.forEach(product =&gt; {\n    // Add the product itself\n    nodes.add(product);\n\n    // Find related rows\n    let related_rows = metadata_js.filter(row =&gt; row.Product_Name === product || row.parent === product || row.child === product);\n\n    related_rows.forEach(row =&gt; {\n      if (select_products.includes(row.Product_Name)) {\n        nodes.add(row.Product_Name);\n        if (row.parent && select_products.includes(row.parent)) {\n          nodes.add(row.parent);\n          if (row.direct_parent === true) {\n            edges.add(`${row.parent} --&gt; ${row.Product_Name}`);\n            }\n          if (row.direct_parent === false) {\n            edges.add(`${row.parent} -.-&gt; ${row.Product_Name}`);\n            }\n        }\n        if (row.child && select_products.includes(row.child)) {\n          nodes.add(row.child);\n          if (row.direct_child === true) {\n            edges.add(`${row.Product_Name} --&gt; ${row.child}`);\n            }\n          if (row.direct_child === false) {\n            edges.add(`${row.Product_Name} -.-&gt; ${row.child}`);\n            }\n        }\n      }\n    });\n  });\n\n  // Create the mermaid syntax\n  let mermaidSyntax = \"graph TD\\n\";\n  \n  // Add nodes to the mermaid syntax\n  nodes.forEach(node =&gt; {\n    mermaidSyntax += `${node}\\n`;\n  });\n\n  // Add edges to the mermaid syntax\n  edges.forEach(edge =&gt; {\n    mermaidSyntax += `${edge}\\n`;\n  });\n  \n  return mermaidSyntax;\n}\n\n// Generate the mermaid chart based on the selected products\nmermaidChart = generateMermaidChart(select_products, filtered_metadata_js);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Display the mermaid chart\nmermaid`${mermaidChart}`\n\n\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(bslib)\n\ntheme &lt;- bs_theme(font_scale = 1.5)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(theme = theme,\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 600\n\n## file: app.R\n{{&lt; include \"src/docx_to_html.R\" &gt;}} # import docx_to_html function\n{{&lt; include \"src/shinyapp_example.R\" &gt;}} # import server & ui code\n\n\n\n## file: metadata.csv\nProduct_ID,Product_Name,Location,Steward,Source,Users,Keywords,PII,Connection\n,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/genbank/wa_genbank_2024-10-21.csv\n,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/genbank/wa_genbank_2024-10-14.csv\n,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/genbank/wa_genbank_2024-10-07.csv\n,wa_genbank,network_drive,DIQA,genbank,DIQA; MEP,ncbi;results;accessions;virus;refseq;upload,No,data/genbank/wa_genbank_2024-09-30.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-03.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-04.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-05.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-06.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-07.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-10.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-11.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-12.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-13.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-14.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-17.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-18.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-19.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-20.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-21.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-24.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-25.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-26.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run163.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run170.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run172.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accession;variants;lineages,No,data/seq_results/results_with_ncbi_run172b.csv\n,,,,,,,,data/seq_report/SequencingReport_2024-01-30.docx"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]