[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "\n\nNORTHWEST PATHOGEN GENOMICS CENTER OF EXCELLENCE\n\nData Catalog\n",
    "section": "",
    "text": "NORTHWEST PATHOGEN GENOMICS CENTER OF EXCELLENCE\n\nData Catalog\n\nThis is a static website and demo of a data catalog. Search for data objects in the dashboard below.\ndashboard\n\n\n\n\n\n\n\n\n\n\n// Create a checkbox input for selecting products\nviewof select_products = Inputs.checkbox(products, {label: \"Select products:\", value: products})\n\n\n\n\n\n\n\nmetadata_js = JSON.parse(metadata_json)\n\n// Function to update parent and child values with intermediate values\nfunction updateMetadataWithIntermediates(metadata_js, select_products) {\n  // Convert select_products to a Set for faster lookup\n  const selectedSet = new Set(select_products);\n  \n  // Create a map to look up intermediate values\n  const productMap = new Map(metadata_js.map(row =&gt; [row.Product_Name, row]));\n\n  return metadata_js.map(row =&gt; {\n    const updatedRow = {...row}; // Copy the row to avoid mutating the original\n    if (!selectedSet.has(row.Product_Name)) {\n      // If the product itself is not selected, exclude it from the results\n      return null;\n    }\n    // Update parent if it's not selected\n    if (row.parent && !selectedSet.has(row.parent)) {\n      // Look for the intermediate product to use its parent\n      const intermediateProduct = metadata_js.find(r =&gt; r.child === row.Product_Name && selectedSet.has(r.parent));\n      updatedRow.parent = intermediateProduct ? intermediateProduct.parent : null;\n      // Update direct_parent to show indirect linkage\n      updatedRow.direct_parent = false;\n    }\n    // Update child if it's not selected\n    if (row.child && !selectedSet.has(row.child)) {\n      // Look for the intermediate product to use its child\n      const intermediateProduct = metadata_js.find(r =&gt; r.parent === row.Product_Name && selectedSet.has(r.child));\n      updatedRow.child = intermediateProduct ? intermediateProduct.child : null;\n      // Update direct_child to show indirect linkage\n      updatedRow.direct_child = false;\n    }\n    return updatedRow;\n  }).filter(row =&gt; row !== null); // Remove rows that were excluded\n}\n\n// Apply the update function\nfiltered_metadata_js = updateMetadataWithIntermediates(metadata_js, select_products);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\ngenerateMermaidChart = (select_products, metadata_js) =&gt; {\n  // Ensure select_products is an array\n  select_products = Array.isArray(select_products) ? select_products : [];\n  \n  if (select_products.length === 0) return \"graph TD\\n\";\n\n  // Collect unique nodes (products) and edges (relationships)\n  let nodes = new Set();\n  let edges = new Set();\n\n  // Add nodes and edges for selected products\n  select_products.forEach(product =&gt; {\n    // Add the product itself\n    nodes.add(product);\n\n    // Find related rows\n    let related_rows = metadata_js.filter(row =&gt; row.Product_Name === product || row.parent === product || row.child === product);\n\n    related_rows.forEach(row =&gt; {\n      if (select_products.includes(row.Product_Name)) {\n        nodes.add(row.Product_Name);\n        if (row.parent && select_products.includes(row.parent)) {\n          nodes.add(row.parent);\n          if (row.direct_parent === true) {\n            edges.add(`${row.parent} --&gt; ${row.Product_Name}`);\n            }\n          if (row.direct_parent === false) {\n            edges.add(`${row.parent} -.-&gt; ${row.Product_Name}`);\n            }\n        }\n        if (row.child && select_products.includes(row.child)) {\n          nodes.add(row.child);\n          if (row.direct_child === true) {\n            edges.add(`${row.Product_Name} --&gt; ${row.child}`);\n            }\n          if (row.direct_child === false) {\n            edges.add(`${row.Product_Name} -.-&gt; ${row.child}`);\n            }\n        }\n      }\n    });\n  });\n\n  // Create the mermaid syntax\n  let mermaidSyntax = \"graph TD\\n\";\n  \n  // Add nodes to the mermaid syntax\n  nodes.forEach(node =&gt; {\n    mermaidSyntax += `${node}\\n`;\n  });\n\n  // Add edges to the mermaid syntax\n  edges.forEach(edge =&gt; {\n    mermaidSyntax += `${edge}\\n`;\n  });\n  \n  return mermaidSyntax;\n}\n\n// Generate the mermaid chart based on the selected products\nmermaidChart = generateMermaidChart(select_products, filtered_metadata_js);\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n// Display the mermaid chart\nmermaid`${mermaidChart}`\n\n\n\n\n\n\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 600\n\nlibrary(shiny)\nlibrary(bslib)\n\ntheme &lt;- bs_theme(font_scale = 1.5)\n\n# Define UI for app that draws a histogram ----\nui &lt;- page_sidebar(theme = theme,\n  sidebar = sidebar(open = \"open\",\n    numericInput(\"n\", \"Sample count\", 100),\n    checkboxInput(\"pause\", \"Pause\", FALSE),\n  ),\n  plotOutput(\"plot\", width=1100)\n)\n\nserver &lt;- function(input, output, session) {\n  data &lt;- reactive({\n    input$resample\n    if (!isTRUE(input$pause)) {\n      invalidateLater(1000)\n    }\n    rnorm(input$n)\n  })\n  \n  output$plot &lt;- renderPlot({\n    hist(data(),\n      breaks = 40,\n      xlim = c(-2, 2),\n      ylim = c(0, 1),\n      lty = \"blank\",\n      xlab = \"value\",\n      freq = FALSE,\n      main = \"\"\n    )\n    \n    x &lt;- seq(from = -2, to = 2, length.out = 500)\n    y &lt;- dnorm(x)\n    lines(x, y, lwd=1.5)\n    \n    lwd &lt;- 5\n    abline(v=0, col=\"red\", lwd=lwd, lty=2)\n    abline(v=mean(data()), col=\"blue\", lwd=lwd, lty=1)\n\n    legend(legend = c(\"Normal\", \"Mean\", \"Sample mean\"),\n      col = c(\"black\", \"red\", \"blue\"),\n      lty = c(1, 2, 1),\n      lwd = c(1, lwd, lwd),\n      x = 1,\n      y = 0.9\n    )\n  }, res=140)\n}\n\n# Create Shiny app ----\nshinyApp(ui = ui, server = server)\n\n\n#| standalone: true\n#| components: [editor, viewer]\n#| viewerHeight: 600\n\n## file: app.R\nlibrary(shiny)\nlibrary(DT)\n\n# Read the CSV file when the script starts\nmetadata &lt;- read.csv(url(\"https://raw.githubusercontent.com/NW-PaGe/dstt_catalog_demo/refs/heads/main/metadata.csv\"))\n\n# Define the UI\nui &lt;- fluidPage(\n  titlePanel(\"Filtered Metadata Viewer\"),\n  sidebarLayout(\n    sidebarPanel(\n      # Static text inputs for certain columns\n      textInput(\"product_id\", \"Product ID\", \"\"),\n      textInput(\"product_name\", \"Product Name\", \"\"),\n      textInput(\"keywords\", \"Keywords\", \"\"),\n      \n      # Static text inputs dynamically pulled from metadata.csv for certain columns\n      selectInput(\"location\", \"Location\", choices = c(\"All\", unique(metadata$Location)), selected = \"All\"),\n      selectInput(\"steward\", \"Steward\", choices = c(\"All\", unique(metadata$Steward)), selected = \"All\"),\n      selectInput(\"users\", \"Users\", choices = c(\"All\", unique(metadata$Users)), selected = \"All\"),\n      selectInput(\"pii\", \"PII\", choices = c(\"All\", unique(metadata$PII)), selected = \"All\"),\n      selectInput(\"source\", \"Source\", choices = c(\"All\", unique(metadata$Source)), selected = \"All\")\n    ),\n    mainPanel(\n      h3(\"Filters Applied:\"),\n      verbatimTextOutput(\"filtersSummary\"),\n      br(),\n      h3(\"Filtered File Paths:\"),\n      uiOutput(\"fileList\"),\n      br(),\n      h3(\"Selected File Data:\"),\n      DTOutput(\"fileDataTable\")\n    )\n  )\n)\n\n# Define the server logic\nserver &lt;- function(input, output, session) {\n  # The only addition needed for the fix\n  observe({\n    output$fileList &lt;- renderUI({\n      file_paths &lt;- filteredData()$Connection\n      tags$ul(\n        lapply(seq_along(file_paths), function(i) {\n          tags$li(\n            actionLink(inputId = paste0(\"file_\", i), label = file_paths[i])\n          )\n        })\n      )\n    })\n  }, priority = 1000)\n  \n  # Original code continues as normal...\n  filteredData &lt;- reactive({\n    data &lt;- metadata\n    \n    # Apply filters based on input values\n    if (!is.null(input$product_id) && input$product_id != \"\") {\n      data &lt;- subset(data, Product_ID == input$product_id)\n    }\n    if (!is.null(input$product_name) && input$product_name != \"\") {\n      data &lt;- subset(data, Product_Name == input$product_name)\n    }\n    if (!is.null(input$keywords) && input$keywords != \"\") {\n      data &lt;- subset(data, Keywords == input$keywords)\n    }\n    if (!is.null(input$location) && input$location != \"All\") {\n      data &lt;- subset(data, Location == input$location)\n    }\n    if (!is.null(input$steward) && input$steward != \"All\") {\n      data &lt;- subset(data, Steward == input$steward)\n    }\n    if (!is.null(input$users) && input$users != \"All\") {\n      data &lt;- subset(data, Users == input$users)\n    }\n    if (!is.null(input$pii) && input$pii != \"All\") {\n      data &lt;- subset(data, PII == input$pii)\n    }\n    if (!is.null(input$source) && input$source != \"All\") {\n      data &lt;- subset(data, Source == input$source)\n    }\n    \n    return(data)\n  })\n  \n  output$filtersSummary &lt;- renderText({\n    filters &lt;- c()\n    \n    if (!is.null(input$product_id) && input$product_id != \"\") {\n      filters &lt;- c(filters, paste(\"Product ID:\", input$product_id))\n    }\n    if (!is.null(input$product_name) && input$product_name != \"\") {\n      filters &lt;- c(filters, paste(\"Product Name:\", input$product_name))\n    }\n    if (!is.null(input$keywords) && input$keywords != \"\") {\n      filters &lt;- c(filters, paste(\"Keywords:\", input$keywords))\n    }\n    if (!is.null(input$location) && input$location != \"All\") {\n      filters &lt;- c(filters, paste(\"Location:\", input$location))\n    }\n    if (!is.null(input$steward) && input$steward != \"All\") {\n      filters &lt;- c(filters, paste(\"Steward:\", input$steward))\n    }\n    if (!is.null(input$users) && input$users != \"All\") {\n      filters &lt;- c(filters, paste(\"Users:\", input$users))\n    }\n    if (!is.null(input$pii) && input$pii != \"All\") {\n      filters &lt;- c(filters, paste(\"PII:\", input$pii))\n    }\n    if (!is.null(input$source) && input$source != \"All\") {\n      filters &lt;- c(filters, paste(\"Source:\", input$source))\n    }\n    \n    if (length(filters) == 0) {\n      return(\"No filters applied.\")\n    } else {\n      return(paste(filters, collapse = \"\\n\"))\n    }\n  })\n  \n  # Reactive value to store the selected file path\n  selectedFile &lt;- reactiveVal(NULL)\n  \n  # Observer to update the selected file path when a link is clicked\n  observe({\n    file_paths &lt;- filteredData()$Connection\n    for (i in seq_along(file_paths)) {\n      if (isTruthy(input[[paste0(\"file_\", i)]])) {\n        selectedFile(file_paths[i])\n        break\n      }\n    }\n  })\n  \n  # Render the data from the selected file\n  output$fileDataTable &lt;- renderDT({\n    req(selectedFile())  # Ensure there is a selected file\n    \n    tryCatch({\n      file_data &lt;- read.csv(url(paste0('https://raw.githubusercontent.com/NW-PaGe/dstt_catalog_demo/refs/heads/main/', selectedFile())))\n      datatable(file_data, options = list(pageLength = 10, autoWidth = TRUE))\n    }, error = function(e) {\n      datatable(data.frame(Error = paste(\"Unable to read file:\", e$message)),\n                options = list(pageLength = 1, dom = 't'))\n    })\n  })\n}\n\n# Run the application \nshinyApp(ui = ui, server = server)\n\n\n## file: metadata.csv\nProduct_ID,Product_Name,Location,Steward,Source,Users,Keywords,PII,Connection\n,wa_genbank,network_drive,DIQA; MEP,genbank,,,No,data/genbank/wa_genbank_2024-06-26.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-03.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-04.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-05.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-06.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-07.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-10.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-11.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-12.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-13.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-14.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-17.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-18.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-19.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-20.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-21.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-24.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-25.csv\n,lineages,network_drive,DIQA,CDC,MEP,variant,No,data/lineages/Lineages_2024-06-26.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_NCBI_run163.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run170.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accessions;variants;lineages,No,data/seq_results/results_with_ncbi_run172.csv\n,seq_results,local,PHL,BINFX,PHL,sequencing;results;accession;variants;lineages,No,data/seq_results/results_with_ncbi_run172b.csv"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  }
]